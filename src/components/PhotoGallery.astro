---
interface Props {
  columns?: number;
  maxRows?: number;
}

const { columns = 3, maxRows = 2 } = Astro.props;

// Importar todas las im√°genes de la carpeta public/gallery
const images = await Astro.glob('/public/gallery/*.(jpg|jpeg|png|gif|webp)');
---

<div class="gallery-container">
  <button 
    class="gallery-nav prev" 
    aria-label="Previous images" 
    style="display: none"
  >&lt;</button>
  
  <button 
    class="gallery-nav next" 
    aria-label="Next images"
    style="display: none"
  >&gt;</button>
  
  <div class="photo-gallery" id="photoGallery">
    <div class="gallery-track">
      {images.map((image, index) => (
        <div 
          class="gallery-item" 
          data-index={index}
        >
          <img 
            src={`/gallery/${image.default.src.split('/').pop()}`}
            alt=""
            loading={index < (columns * maxRows) ? "eager" : "lazy"}
            class="gallery-image"
          />
        </div>
      ))}
    </div>
  </div>

  <div class="lightbox" id="lightbox">
    <button class="lightbox-close" aria-label="Close lightbox">&times;</button>
    <button class="lightbox-nav prev" aria-label="Previous image">&lt;</button>
    <button class="lightbox-nav next" aria-label="Next image">&gt;</button>
    <div class="lightbox-content">
      {images.map((image) => (
        <img 
          src={`/gallery/${image.default.src.split('/').pop()}`}
          alt=""
          loading="lazy"
          class="lightbox-image"
        />
      ))}
    </div>
  </div>
</div>

<script define:vars={{ maxRows }}>
  // Gallery navigation functionality
  const gallery = document.getElementById('photoGallery');
  const track = gallery.querySelector('.gallery-track');
  const items = track.querySelectorAll('.gallery-item');
  const galleryNavPrev = document.querySelector('.gallery-container .gallery-nav.prev');
  const galleryNavNext = document.querySelector('.gallery-container .gallery-nav.next');
  
  let currentPage = 0;
  let currentColumns = 3;
  let imagesPerPage = currentColumns * maxRows;

  function updateCurrentColumns() {
    const width = window.innerWidth;
    if (width <= 640) {
      currentColumns = 1;
    } else if (width <= 1024) {
      currentColumns = 2;
    } else {
      currentColumns = 3;
    }
    imagesPerPage = currentColumns * maxRows;
    return currentColumns;
  }

  function updateGalleryVisibility() {
    updateCurrentColumns();
    const pageStart = currentPage * imagesPerPage;
    const pageEnd = pageStart + imagesPerPage;

    items.forEach((item, index) => {
      const isVisible = index >= pageStart && index < pageEnd;
      item.style.display = isVisible ? 'block' : 'none';
      if (isVisible) {
        item.style.transform = `translateX(0)`;
      }
    });
  }

  function updateNavButtons() {
    const totalPages = Math.ceil(items.length / imagesPerPage);
    galleryNavPrev.style.display = currentPage > 0 ? 'flex' : 'none';
    galleryNavNext.style.display = currentPage < totalPages - 1 ? 'flex' : 'none';
  }

  function navigateGallery(direction) {
    const totalPages = Math.ceil(items.length / imagesPerPage);
    currentPage = Math.max(0, Math.min(totalPages - 1, currentPage + direction));
    updateGalleryVisibility();
    updateNavButtons();
  }

  // Initialize gallery
  function initGallery() {
    updateGalleryVisibility();
    updateNavButtons();
  }

  // Initialize on load
  initGallery();

  // Update on window resize
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      const oldColumns = currentColumns;
      const newColumns = updateCurrentColumns();
      
      if (oldColumns !== newColumns) {
        // Adjust currentPage if needed
        const totalPages = Math.ceil(items.length / imagesPerPage);
        currentPage = Math.min(currentPage, totalPages - 1);
        updateGalleryVisibility();
        updateNavButtons();
      }
    }, 100);
  });

  galleryNavPrev.addEventListener('click', () => navigateGallery(-1));
  galleryNavNext.addEventListener('click', () => navigateGallery(1));

  // Lightbox functionality
  let currentIndex = 0;
  const lightbox = document.getElementById('lightbox');
  const lightboxImages = document.querySelectorAll('.lightbox-image');
  const totalImages = items.length;

  function showImage(index) {
    currentIndex = index;
    const offset = -100 * currentIndex;
    const content = lightbox.querySelector('.lightbox-content');
    content.style.transform = `translateX(${offset}%)`;
  }

  items.forEach((item, index) => {
    item.addEventListener('click', () => {
      lightbox.classList.add('active');
      document.body.style.overflow = 'hidden';
      showImage(index);
    });
  });

  lightbox.querySelector('.lightbox-close').addEventListener('click', () => {
    lightbox.classList.remove('active');
    document.body.style.overflow = '';
  });

  lightbox.querySelector('.prev').addEventListener('click', () => {
    showImage((currentIndex - 1 + totalImages) % totalImages);
  });

  lightbox.querySelector('.next').addEventListener('click', () => {
    showImage((currentIndex + 1) % totalImages);
  });

  // Touch support
  let touchStartX = 0;
  let touchEndX = 0;

  lightbox.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  });

  lightbox.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  });

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        showImage((currentIndex + 1) % totalImages);
      } else {
        showImage((currentIndex - 1 + totalImages) % totalImages);
      }
    }
  }

  // Keyboard support
  document.addEventListener('keydown', (e) => {
    if (!lightbox.classList.contains('active')) return;

    if (e.key === 'Escape') {
      lightbox.classList.remove('active');
      document.body.style.overflow = '';
    } else if (e.key === 'ArrowLeft') {
      showImage((currentIndex - 1 + totalImages) % totalImages);
    } else if (e.key === 'ArrowRight') {
      showImage((currentIndex + 1) % totalImages);
    }
  });
</script>

<style define:vars={{ columns, maxRows }}>
  .gallery-container {
    position: relative;
    padding: 0 3rem;
  }

  .photo-gallery {
    overflow: hidden;
    max-width: 1400px;
    margin: 0 auto;
  }

  .gallery-track {
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    gap: 1.5rem;
    transition: transform 0.3s ease;
  }

  .gallery-item {
    position: relative;
    border-radius: 0.5rem;
    overflow: hidden;
    aspect-ratio: 1;
    cursor: pointer;
    transition: transform 0.3s ease;
  }

  .gallery-item:hover {
    transform: scale(1.02);
  }

  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .gallery-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 2.5rem;
    height: 2.5rem;
    background: rgba(0, 0, 0, 0.5);
    border: none;
    border-radius: 50%;
    color: white;
    font-size: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    transition: all 0.3s ease;
  }

  .gallery-nav:hover {
    background: rgba(0, 0, 0, 0.7);
    transform: translateY(-50%) scale(1.1);
  }

  .gallery-nav.prev {
    left: 0;
  }

  .gallery-nav.next {
    right: 0;
  }

  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .lightbox.active {
    display: flex;
  }

  .lightbox-content {
    display: flex;
    transition: transform 0.3s ease;
    height: 100vh;
    width: 100vw;
  }

  .lightbox-image {
    width: 100vw;
    height: 100vh;
    object-fit: contain;
    flex-shrink: 0;
    padding: 2rem;
  }

  .lightbox-close {
    position: fixed;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    z-index: 1001;
    padding: 0.5rem;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.5);
    transition: background-color 0.3s ease;
  }

  .lightbox-close:hover {
    background: rgba(0, 0, 0, 0.7);
  }

  .lightbox-nav {
    position: fixed;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    z-index: 1001;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .lightbox-nav:hover {
    background: rgba(0, 0, 0, 0.7);
    transform: translateY(-50%) scale(1.1);
  }

  .lightbox-nav.prev {
    left: 1rem;
  }

  .lightbox-nav.next {
    right: 1rem;
  }

  @media (max-width: 1024px) {
    .gallery-track {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 640px) {
    .gallery-track {
      grid-template-columns: 1fr;
    }

    .gallery-nav, .lightbox-nav {
      font-size: 1.25rem;
      width: 2rem;
      height: 2rem;
    }

    .gallery-container {
      padding: 0 2rem;
    }
  }
</style>